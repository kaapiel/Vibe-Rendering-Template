//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-21112126
// Cuda compilation tools, release 8.0, V8.0.43
// Based on LLVM 3.4svn
//

.version 5.0
.target sm_30
.address_size 64

	// .globl	ACEOptRGBtoRGBOverRangeKernel
.global .texref ACEOptRGBtoRGB1OverRangeCurves;
.global .texref ACEOptRGBtoRGB1OverRangeTable;
.const .align 4 .b8 kRGB32f_To_601YPbPr[36] = {135, 22, 153, 62, 162, 69, 22, 63, 213, 120, 233, 61, 33, 201, 44, 190, 111, 155, 169, 190, 0, 0, 0, 63, 0, 0, 0, 63, 70, 94, 214, 190, 232, 134, 166, 189};
.const .align 4 .b8 k601YPbPr_To_RGB32f[36] = {0, 0, 128, 63, 0, 0, 0, 0, 188, 116, 179, 63, 0, 0, 128, 63, 152, 50, 176, 190, 158, 209, 54, 191, 0, 0, 128, 63, 229, 208, 226, 63, 0, 0, 0, 0};
.const .align 4 .b8 kRGB32f_To_601YCbCr[36] = {70, 246, 130, 66, 145, 141, 0, 67, 94, 186, 199, 65, 33, 48, 23, 194, 240, 103, 148, 194, 0, 0, 224, 66, 0, 0, 224, 66, 111, 146, 187, 194, 70, 182, 145, 193};
.const .align 4 .b8 k601YCbCr_To_RGB32f[36] = {37, 160, 149, 59, 0, 0, 0, 0, 182, 23, 205, 59, 37, 160, 149, 59, 40, 15, 201, 186, 156, 239, 80, 187, 37, 160, 149, 59, 236, 155, 1, 60, 0, 0, 0, 0};
.const .align 4 .b8 kRGB8u_To_601YCbCr[36] = {219, 121, 131, 62, 152, 14, 1, 63, 18, 131, 200, 61, 174, 199, 23, 190, 238, 252, 148, 190, 197, 224, 224, 62, 197, 224, 224, 62, 217, 78, 188, 190, 174, 71, 146, 189};
.const .align 4 .b8 k601YCbCr_To_RGB8u[36] = {127, 10, 149, 63, 0, 0, 0, 0, 160, 74, 204, 63, 127, 10, 149, 63, 254, 148, 200, 190, 184, 30, 80, 191, 127, 10, 149, 63, 78, 26, 1, 64, 0, 0, 0, 0};
.const .align 4 .b8 kRGB8u_To_601YCbCrFullRange[36] = {135, 22, 153, 62, 162, 69, 22, 63, 213, 120, 233, 61, 166, 27, 44, 190, 39, 241, 168, 190, 250, 254, 254, 62, 250, 254, 254, 62, 43, 135, 213, 190, 59, 223, 165, 189};
.const .align 4 .b8 k601YCbCrFullRange_To_RGB8u[36] = {0, 0, 128, 63, 0, 0, 0, 0, 72, 193, 178, 63, 0, 0, 128, 63, 143, 130, 175, 190, 225, 26, 54, 191, 0, 0, 128, 63, 20, 238, 225, 63, 0, 0, 0, 0};
.const .align 4 .b8 kRGB32f_To_601YCbCrFullRange[36] = {113, 125, 152, 66, 92, 175, 21, 67, 92, 143, 232, 65, 158, 111, 43, 194, 49, 72, 168, 194, 0, 0, 254, 66, 0, 0, 254, 66, 170, 177, 212, 194, 88, 57, 165, 193};
.const .align 4 .b8 k601YCbCrFullRange_To_RGB32f[36] = {129, 128, 128, 59, 0, 0, 0, 0, 188, 116, 179, 59, 129, 128, 128, 59, 194, 50, 176, 186, 179, 209, 54, 187, 129, 128, 128, 59, 229, 208, 226, 59, 0, 0, 0, 0};
.const .align 4 .b8 kRGB32f_To_709YPbPr[36] = {208, 179, 89, 62, 89, 23, 55, 63, 152, 221, 147, 61, 186, 164, 234, 189, 210, 86, 197, 190, 0, 0, 0, 63, 0, 0, 0, 63, 190, 134, 232, 190, 16, 202, 59, 189};
.const .align 4 .b8 k709YPbPr_To_RGB32f[36] = {0, 0, 128, 63, 0, 0, 0, 0, 12, 147, 201, 63, 0, 0, 128, 63, 221, 209, 63, 190, 243, 173, 239, 190, 0, 0, 128, 63, 77, 132, 237, 63, 0, 0, 0, 0};
.const .align 4 .b8 kRGB32f_To_709YCbCr[36] = {106, 60, 58, 66, 6, 161, 28, 67, 244, 253, 124, 65, 223, 79, 205, 193, 8, 172, 172, 194, 0, 0, 224, 66, 0, 0, 224, 66, 195, 117, 203, 194, 236, 81, 36, 193};
.const .align 4 .b8 k709YCbCr_To_RGB32f[36] = {37, 160, 149, 59, 0, 0, 0, 0, 239, 94, 230, 59, 37, 160, 149, 59, 33, 57, 91, 186, 178, 245, 8, 187, 37, 160, 149, 59, 82, 185, 7, 60, 0, 0, 0, 0};
.const .align 4 .b8 k709YCbCrFullRange_To_RGB32f[36] = {131, 128, 128, 59, 0, 0, 0, 0, 28, 147, 201, 59, 131, 128, 128, 59, 61, 210, 63, 186, 248, 173, 239, 186, 131, 128, 128, 59, 82, 132, 237, 59, 0, 0, 0, 0};
.const .align 4 .b8 kRGB8u_To_709YCbCr[36] = {207, 247, 58, 62, 53, 62, 29, 63, 231, 251, 125, 61, 184, 30, 206, 189, 23, 89, 173, 190, 197, 224, 224, 62, 197, 224, 224, 62, 12, 66, 204, 190, 195, 245, 36, 189};
.const .align 4 .b8 k709YCbCr_To_RGB8u[36] = {127, 10, 149, 63, 0, 0, 0, 0, 147, 120, 229, 63, 127, 10, 149, 63, 53, 94, 90, 190, 205, 108, 8, 191, 127, 10, 149, 63, 154, 49, 7, 64, 0, 0, 0, 0};
.const .align 4 .b8 k709YCbCr_To_601YCbCr[36] = {0, 0, 128, 63, 23, 100, 203, 61, 1, 77, 68, 62, 0, 0, 0, 0, 18, 103, 125, 63, 10, 158, 226, 189, 0, 0, 0, 0, 61, 98, 148, 189, 249, 191, 123, 63};
.const .align 4 .b8 k601YCbCr_To_709YCbCr[36] = {0, 0, 128, 63, 122, 165, 236, 189, 179, 237, 84, 190, 0, 0, 0, 0, 204, 98, 130, 63, 216, 188, 234, 61, 0, 0, 0, 0, 74, 179, 153, 61, 234, 61, 131, 63};
.const .align 4 .b8 kYCbCrOffset[12] = {0, 0, 128, 65, 0, 0, 0, 67, 0, 0, 0, 67};
.const .align 4 .b8 kYCbCrFullRangeOffset[12] = {0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 67};
.const .align 4 .u32 kRandMax = 32767;

.visible .entry ACEOptRGBtoRGBOverRangeKernel(
	.param .u64 ACEOptRGBtoRGBOverRangeKernel_param_0,
	.param .u64 ACEOptRGBtoRGBOverRangeKernel_param_1,
	.param .u64 ACEOptRGBtoRGBOverRangeKernel_param_2,
	.param .u32 ACEOptRGBtoRGBOverRangeKernel_param_3,
	.param .u32 ACEOptRGBtoRGBOverRangeKernel_param_4,
	.param .u32 ACEOptRGBtoRGBOverRangeKernel_param_5,
	.param .u32 ACEOptRGBtoRGBOverRangeKernel_param_6
)
{
	.reg .pred 	%p<7>;
	.reg .b16 	%rs<13>;
	.reg .f32 	%f<120>;
	.reg .b32 	%r<14>;
	.reg .f64 	%fd<7>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd3, [ACEOptRGBtoRGBOverRangeKernel_param_2];
	ld.param.u32 	%r3, [ACEOptRGBtoRGBOverRangeKernel_param_3];
	ld.param.u32 	%r4, [ACEOptRGBtoRGBOverRangeKernel_param_4];
	ld.param.u32 	%r5, [ACEOptRGBtoRGBOverRangeKernel_param_5];
	ld.param.u32 	%r6, [ACEOptRGBtoRGBOverRangeKernel_param_6];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	setp.lt.s32	%p1, %r1, %r5;
	setp.lt.s32	%p2, %r2, %r6;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB0_9;
	bra.uni 	BB0_1;

BB0_1:
	cvta.to.global.u64 	%rd4, %rd3;
	mad.lo.s32 	%r13, %r2, %r3, %r1;
	cvt.s64.s32	%rd1, %r13;
	mul.wide.s32 	%rd5, %r13, 16;
	add.s64 	%rd2, %rd4, %rd5;
	setp.eq.s32	%p4, %r4, 0;
	@%p4 bra 	BB0_3;

	ld.global.v4.f32 	{%f24, %f25, %f26, %f27}, [%rd2];
	mov.f32 	%f115, %f27;
	mov.f32 	%f114, %f26;
	mov.f32 	%f113, %f25;
	mov.f32 	%f112, %f24;
	bra.uni 	BB0_4;

BB0_3:
	shl.b64 	%rd7, %rd1, 3;
	add.s64 	%rd8, %rd4, %rd7;
	ld.global.v4.u16 	{%rs1, %rs2, %rs3, %rs4}, [%rd8];
	{
	.reg .b16 %temp;
	mov.b16 	%temp, %rs1;
	cvt.f32.f16 	%f112, %temp;
	}
	{
	.reg .b16 %temp;
	mov.b16 	%temp, %rs2;
	cvt.f32.f16 	%f113, %temp;
	}
	{
	.reg .b16 %temp;
	mov.b16 	%temp, %rs3;
	cvt.f32.f16 	%f114, %temp;
	}
	{
	.reg .b16 %temp;
	mov.b16 	%temp, %rs4;
	cvt.f32.f16 	%f115, %temp;
	}

BB0_4:
	cvt.ftz.sat.f32.f32	%f13, %f115;
	add.ftz.f32 	%f32, %f13, 0fB70637BD;
	mov.f32 	%f31, 0f00000000;
	mov.f32 	%f118, %f31;
	mov.f32 	%f117, %f31;
	mov.f32 	%f116, %f31;
	setp.le.ftz.f32	%p5, %f32, 0f00000000;
	mov.f32 	%f119, %f31;
	@%p5 bra 	BB0_6;

	mov.f32 	%f33, 0f3F800000;
	div.approx.ftz.f32 	%f34, %f33, %f13;
	mul.ftz.f32 	%f118, %f114, %f34;
	mul.ftz.f32 	%f117, %f113, %f34;
	mul.ftz.f32 	%f116, %f112, %f34;
	mov.f32 	%f119, %f13;

BB0_6:
	mov.f32 	%f20, %f119;
	mov.f32 	%f35, 0fBF800000;
	max.ftz.f32 	%f36, %f118, %f35;
	mov.f32 	%f37, 0f40C00000;
	min.ftz.f32 	%f38, %f36, %f37;
	max.ftz.f32 	%f39, %f117, %f35;
	min.ftz.f32 	%f40, %f39, %f37;
	max.ftz.f32 	%f41, %f116, %f35;
	min.ftz.f32 	%f42, %f41, %f37;
	add.ftz.f32 	%f43, %f38, 0f3F800000;
	add.ftz.f32 	%f44, %f40, 0f3F800000;
	add.ftz.f32 	%f45, %f42, 0f3F800000;
	cvt.rmi.ftz.f32.f32	%f46, %f43;
	cvt.rmi.ftz.f32.f32	%f47, %f44;
	cvt.rmi.ftz.f32.f32	%f48, %f45;
	add.ftz.f32 	%f49, %f46, 0f3F000000;
	add.ftz.f32 	%f50, %f47, 0f3F000000;
	add.ftz.f32 	%f51, %f48, 0f3F000000;
	add.ftz.f32 	%f52, %f46, 0f3FC00000;
	add.ftz.f32 	%f53, %f47, 0f3FC00000;
	add.ftz.f32 	%f54, %f48, 0f3FC00000;
	tex.2d.v4.f32.f32	{%f56, %f57, %f58, %f59}, [ACEOptRGBtoRGB1OverRangeCurves, {%f49, %f31}];
	tex.2d.v4.f32.f32	{%f60, %f61, %f62, %f63}, [ACEOptRGBtoRGB1OverRangeCurves, {%f50, %f31}];
	tex.2d.v4.f32.f32	{%f64, %f65, %f66, %f67}, [ACEOptRGBtoRGB1OverRangeCurves, {%f51, %f31}];
	tex.2d.v4.f32.f32	{%f68, %f69, %f70, %f71}, [ACEOptRGBtoRGB1OverRangeCurves, {%f52, %f31}];
	tex.2d.v4.f32.f32	{%f72, %f73, %f74, %f75}, [ACEOptRGBtoRGB1OverRangeCurves, {%f53, %f31}];
	tex.2d.v4.f32.f32	{%f76, %f77, %f78, %f79}, [ACEOptRGBtoRGB1OverRangeCurves, {%f54, %f31}];
	sub.ftz.f32 	%f80, %f43, %f46;
	sub.ftz.f32 	%f81, %f44, %f47;
	sub.ftz.f32 	%f82, %f45, %f48;
	mov.f32 	%f83, 0f3F800000;
	sub.ftz.f32 	%f84, %f83, %f80;
	sub.ftz.f32 	%f85, %f83, %f81;
	sub.ftz.f32 	%f86, %f83, %f82;
	mul.ftz.f32 	%f87, %f80, %f68;
	mul.ftz.f32 	%f88, %f81, %f73;
	mul.ftz.f32 	%f89, %f82, %f78;
	fma.rn.ftz.f32 	%f90, %f84, %f56, %f87;
	fma.rn.ftz.f32 	%f91, %f85, %f61, %f88;
	fma.rn.ftz.f32 	%f92, %f86, %f66, %f89;
	fma.rn.ftz.f32 	%f93, %f90, 0f41F80000, 0f3F000000;
	cvt.rmi.ftz.f32.f32	%f94, %f93;
	fma.rn.ftz.f32 	%f95, %f91, 0f41F80000, 0f3F000000;
	cvt.rmi.ftz.f32.f32	%f96, %f95;
	fma.rn.ftz.f32 	%f97, %f92, 0f41F80000, 0f3F000000;
	cvt.rmi.ftz.f32.f32	%f98, %f97;
	cvt.ftz.f64.f32	%fd1, %f98;
	mul.f64 	%fd2, %fd1, 0d4090000000000000;
	cvt.ftz.f64.f32	%fd3, %f96;
	fma.rn.f64 	%fd4, %fd3, 0d4040000000000000, %fd2;
	cvt.ftz.f64.f32	%fd5, %f94;
	add.f64 	%fd6, %fd5, %fd4;
	cvt.rn.ftz.f32.f64	%f99, %fd6;
	tex.2d.v4.f32.f32	{%f100, %f101, %f102, %f103}, [ACEOptRGBtoRGB1OverRangeTable, {%f99, %f31}];
	tex.2d.v4.f32.f32	{%f104, %f105, %f106, %f107}, [ACEOptRGBtoRGB1OverRangeTable, {%f99, %f31}];
	tex.2d.v4.f32.f32	{%f108, %f109, %f110, %f111}, [ACEOptRGBtoRGB1OverRangeTable, {%f99, %f31}];
	mul.ftz.f32 	%f21, %f20, %f100;
	mul.ftz.f32 	%f22, %f20, %f105;
	mul.ftz.f32 	%f23, %f20, %f110;
	@%p4 bra 	BB0_8;

	st.global.v4.f32 	[%rd2], {%f23, %f22, %f21, %f20};
	bra.uni 	BB0_9;

BB0_8:
	shl.b64 	%rd12, %rd1, 3;
	add.s64 	%rd13, %rd4, %rd12;
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f20;
	mov.b16 	%rs9, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f21;
	mov.b16 	%rs10, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f22;
	mov.b16 	%rs11, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f23;
	mov.b16 	%rs12, %temp;
}
	st.global.v4.u16 	[%rd13], {%rs12, %rs11, %rs10, %rs9};

BB0_9:
	ret;
}


