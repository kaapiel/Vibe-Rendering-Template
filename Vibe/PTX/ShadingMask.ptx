//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-21112126
// Cuda compilation tools, release 8.0, V8.0.43
// Based on LLVM 3.4svn
//

.version 5.0
.target sm_30
.address_size 64

	// .globl	ShadingMaskKernel
.global .texref texture0_RECT;
.global .texref texture1_RECT;
.global .texref inMaskImage;

.visible .entry ShadingMaskKernel(
	.param .u64 ShadingMaskKernel_param_0,
	.param .u64 ShadingMaskKernel_param_1,
	.param .u64 ShadingMaskKernel_param_2,
	.param .f32 ShadingMaskKernel_param_3,
	.param .f32 ShadingMaskKernel_param_4,
	.param .u32 ShadingMaskKernel_param_5,
	.param .u32 ShadingMaskKernel_param_6
)
{
	.reg .pred 	%p<23>;
	.reg .b16 	%rs<15>;
	.reg .f32 	%f<82>;
	.reg .b32 	%r<38>;
	.reg .b64 	%rd<21>;


	ld.param.u64 	%rd9, [ShadingMaskKernel_param_0];
	ld.param.u64 	%rd10, [ShadingMaskKernel_param_1];
	ld.param.u64 	%rd11, [ShadingMaskKernel_param_2];
	ld.param.f32 	%f19, [ShadingMaskKernel_param_3];
	ld.param.f32 	%f20, [ShadingMaskKernel_param_4];
	ld.param.u32 	%r11, [ShadingMaskKernel_param_5];
	ld.param.u32 	%r12, [ShadingMaskKernel_param_6];
	cvta.to.global.u64 	%rd1, %rd11;
	mov.u32 	%r13, %ntid.x;
	mov.u32 	%r14, %ctaid.x;
	mov.u32 	%r15, %tid.x;
	mad.lo.s32 	%r1, %r13, %r14, %r15;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %ctaid.y;
	mov.u32 	%r18, %tid.y;
	mad.lo.s32 	%r2, %r16, %r17, %r18;
	setp.lt.s32	%p1, %r1, 0;
	setp.ge.s32	%p2, %r1, %r11;
	or.pred  	%p3, %p1, %p2;
	setp.lt.s32	%p4, %r2, 0;
	or.pred  	%p5, %p3, %p4;
	setp.ge.s32	%p6, %r2, %r12;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	BB0_20;

	cvta.to.global.u64 	%rd12, %rd10;
	mul.wide.s32 	%rd13, %r2, 4;
	add.s64 	%rd14, %rd12, %rd13;
	ld.global.u32 	%r19, [%rd14];
	ld.global.u32 	%r20, [%rd14+4];
	sub.s32 	%r3, %r20, %r19;
	setp.eq.s32	%p8, %r20, %r19;
	mov.f32 	%f81, 0f00000000;
	@%p8 bra 	BB0_19;

	sub.ftz.f32 	%f22, %f19, %f20;
	cvt.rn.f32.u32	%f23, %r11;
	div.approx.ftz.f32 	%f24, %f22, %f23;
	cvt.rn.f32.s32	%f25, %r1;
	fma.rn.ftz.f32 	%f1, %f25, %f24, %f20;
	mov.u32 	%r37, 0;
	mov.u16 	%rs14, 0;
	mov.u32 	%r36, %r37;
	mov.u64 	%rd19, %rd1;

BB0_3:
	mov.u64 	%rd2, %rd19;
	add.s64 	%rd3, %rd2, 20;
	ld.global.f32 	%f26, [%rd2+20];
	setp.geu.ftz.f32	%p9, %f26, %f1;
	@%p9 bra 	BB0_5;

	ld.global.u32 	%r23, [%rd3+16];
	ld.global.u32 	%r24, [%rd3+-4];
	or.b32  	%r25, %r23, %r24;
	setp.ne.s32	%p10, %r25, 0;
	and.b16  	%rs9, %rs14, 255;
	setp.eq.s16	%p11, %rs9, 0;
	selp.u16	%rs10, 1, 0, %p11;
	selp.b16	%rs14, %rs10, %rs14, %p10;
	add.s32 	%r37, %r36, 1;

BB0_5:
	add.s64 	%rd4, %rd2, 40;
	add.s32 	%r36, %r36, 1;
	setp.lt.u32	%p12, %r36, %r3;
	mov.u64 	%rd19, %rd4;
	@%p12 bra 	BB0_3;

	setp.eq.s32	%p13, %r37, %r3;
	@%p13 bra 	BB0_19;

	mov.f32 	%f80, 0f00000000;
	setp.ge.u32	%p14, %r37, %r3;
	@%p14 bra 	BB0_18;

	mul.wide.u32 	%rd15, %r37, 40;
	add.s64 	%rd20, %rd1, %rd15;
	mov.f32 	%f80, 0f00000000;

BB0_9:
	ld.global.f32 	%f3, [%rd20];
	setp.gt.ftz.f32	%p15, %f3, %f1;
	@%p15 bra 	BB0_17;

	ld.global.u32 	%r26, [%rd20+16];
	setp.ne.s32	%p16, %r26, 0;
	and.b16  	%rs11, %rs14, 255;
	setp.eq.s16	%p17, %rs11, 0;
	selp.u16	%rs12, 1, 0, %p17;
	selp.b16	%rs14, %rs12, %rs14, %p16;
	sub.ftz.f32 	%f30, %f1, %f3;
	abs.ftz.f32 	%f31, %f30;
	ld.global.f32 	%f32, [%rd20+20];
	sub.ftz.f32 	%f33, %f1, %f32;
	abs.ftz.f32 	%f34, %f33;
	add.ftz.f32 	%f35, %f31, %f34;
	rcp.approx.ftz.f32 	%f36, %f35;
	setp.le.ftz.f32	%p18, %f35, 0f3A83126F;
	selp.f32	%f37, 0f3F800000, %f31, %p18;
	selp.f32	%f38, 0f3F800000, %f34, %p18;
	selp.f32	%f39, 0f3F000000, %f36, %p18;
	ld.global.f32 	%f40, [%rd20+4];
	ld.global.f32 	%f41, [%rd20+24];
	mul.ftz.f32 	%f42, %f41, %f37;
	fma.rn.ftz.f32 	%f43, %f40, %f38, %f42;
	mul.ftz.f32 	%f4, %f39, %f43;
	ld.global.f32 	%f44, [%rd20+8];
	ld.global.f32 	%f45, [%rd20+28];
	mul.ftz.f32 	%f46, %f37, %f45;
	fma.rn.ftz.f32 	%f47, %f38, %f44, %f46;
	mul.ftz.f32 	%f48, %f39, %f47;
	ld.global.f32 	%f49, [%rd20+12];
	ld.global.f32 	%f50, [%rd20+32];
	mul.ftz.f32 	%f51, %f37, %f50;
	fma.rn.ftz.f32 	%f52, %f38, %f49, %f51;
	mul.ftz.f32 	%f5, %f39, %f52;
	fma.rn.ftz.f32 	%f6, %f48, 0f40000000, 0f3F800000;
	setp.ltu.ftz.f32	%p19, %f4, 0f00000000;
	@%p19 bra 	BB0_12;
	bra.uni 	BB0_11;

BB0_12:
	neg.ftz.f32 	%f55, %f4;
	lg2.approx.ftz.f32 	%f56, %f55;
	mul.ftz.f32 	%f57, %f6, %f56;
	ex2.approx.ftz.f32 	%f58, %f57;
	neg.ftz.f32 	%f78, %f58;
	bra.uni 	BB0_13;

BB0_11:
	lg2.approx.ftz.f32 	%f53, %f4;
	mul.ftz.f32 	%f54, %f6, %f53;
	ex2.approx.ftz.f32 	%f78, %f54;

BB0_13:
	mov.f32 	%f59, 0f3F800000;
	sub.ftz.f32 	%f10, %f59, %f4;
	setp.ltu.ftz.f32	%p20, %f10, 0f00000000;
	@%p20 bra 	BB0_15;
	bra.uni 	BB0_14;

BB0_15:
	neg.ftz.f32 	%f62, %f10;
	lg2.approx.ftz.f32 	%f63, %f62;
	mul.ftz.f32 	%f64, %f6, %f63;
	ex2.approx.ftz.f32 	%f65, %f64;
	neg.ftz.f32 	%f79, %f65;
	bra.uni 	BB0_16;

BB0_14:
	lg2.approx.ftz.f32 	%f60, %f10;
	mul.ftz.f32 	%f61, %f6, %f60;
	ex2.approx.ftz.f32 	%f79, %f61;

BB0_16:
	add.ftz.f32 	%f66, %f5, %f5;
	add.ftz.f32 	%f67, %f66, 0fBF800000;
	cvt.ftz.sat.f32.f32	%f68, %f67;
	cvt.ftz.sat.f32.f32	%f69, %f66;
	sub.ftz.f32 	%f70, %f69, %f68;
	fma.rn.ftz.f32 	%f71, %f4, %f70, %f68;
	sub.ftz.f32 	%f73, %f59, %f79;
	sub.ftz.f32 	%f74, %f73, %f78;
	fma.rn.ftz.f32 	%f75, %f74, %f71, %f78;
	max.ftz.f32 	%f80, %f80, %f75;

BB0_17:
	add.s64 	%rd20, %rd20, 40;
	add.s32 	%r37, %r37, 1;
	setp.lt.u32	%p21, %r37, %r3;
	@%p21 bra 	BB0_9;

BB0_18:
	and.b16  	%rs13, %rs14, 255;
	setp.ne.s16	%p22, %rs13, 0;
	selp.f32	%f76, 0f3F800000, %f80, %p22;
	mov.f32 	%f77, 0f3F800000;
	min.ftz.f32 	%f81, %f76, %f77;

BB0_19:
	mad.lo.s32 	%r35, %r2, %r11, %r1;
	cvta.to.global.u64 	%rd16, %rd9;
	mul.wide.u32 	%rd17, %r35, 4;
	add.s64 	%rd18, %rd16, %rd17;
	st.global.f32 	[%rd18], %f81;

BB0_20:
	ret;
}

	// .globl	Mask_Blend_Normal_ANormal
.visible .entry Mask_Blend_Normal_ANormal(
	.param .u64 Mask_Blend_Normal_ANormal_param_0,
	.param .u64 Mask_Blend_Normal_ANormal_param_1,
	.param .u64 Mask_Blend_Normal_ANormal_param_2,
	.param .u64 Mask_Blend_Normal_ANormal_param_3,
	.param .u32 Mask_Blend_Normal_ANormal_param_4,
	.param .u32 Mask_Blend_Normal_ANormal_param_5,
	.param .u32 Mask_Blend_Normal_ANormal_param_6,
	.param .u32 Mask_Blend_Normal_ANormal_param_7,
	.param .f32 Mask_Blend_Normal_ANormal_param_8
)
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<5>;
	.reg .f32 	%f<25>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd2, [Mask_Blend_Normal_ANormal_param_0];
	ld.param.u64 	%rd3, [Mask_Blend_Normal_ANormal_param_1];
	ld.param.u32 	%r3, [Mask_Blend_Normal_ANormal_param_4];
	ld.param.u32 	%r4, [Mask_Blend_Normal_ANormal_param_5];
	ld.param.u32 	%r5, [Mask_Blend_Normal_ANormal_param_6];
	ld.param.u32 	%r6, [Mask_Blend_Normal_ANormal_param_7];
	ld.param.f32 	%f5, [Mask_Blend_Normal_ANormal_param_8];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	setp.lt.s32	%p1, %r1, %r5;
	setp.lt.s32	%p2, %r2, %r6;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB1_4;
	bra.uni 	BB1_1;

BB1_1:
	cvt.rn.f32.s32	%f6, %r1;
	add.ftz.f32 	%f7, %f6, 0f3F000000;
	cvt.rn.f32.s32	%f8, %r2;
	add.ftz.f32 	%f9, %f8, 0f3F000000;
	tex.2d.v4.f32.f32	{%f10, %f11, %f12, %f13}, [texture0_RECT, {%f7, %f9}];
	tex.2d.v4.f32.f32	{%f14, %f15, %f16, %f1}, [texture1_RECT, {%f7, %f9}];
	mad.lo.s32 	%r13, %r2, %r5, %r1;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f17, [%rd8];
	mul.ftz.f32 	%f18, %f17, %f1;
	mul.ftz.f32 	%f19, %f18, %f5;
	mov.f32 	%f20, 0f3F800000;
	sub.ftz.f32 	%f21, %f20, %f19;
	mul.ftz.f32 	%f22, %f10, %f21;
	fma.rn.ftz.f32 	%f2, %f14, %f19, %f22;
	mul.ftz.f32 	%f23, %f11, %f21;
	fma.rn.ftz.f32 	%f3, %f15, %f19, %f23;
	mul.ftz.f32 	%f24, %f12, %f21;
	fma.rn.ftz.f32 	%f4, %f16, %f19, %f24;
	mad.lo.s32 	%r14, %r2, %r3, %r1;
	cvt.s64.s32	%rd1, %r14;
	setp.eq.s32	%p4, %r4, 0;
	@%p4 bra 	BB1_3;

	cvta.to.global.u64 	%rd9, %rd3;
	shl.b64 	%rd10, %rd1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.v4.f32 	[%rd11], {%f2, %f3, %f4, %f1};
	bra.uni 	BB1_4;

BB1_3:
	cvta.to.global.u64 	%rd12, %rd3;
	shl.b64 	%rd13, %rd1, 3;
	add.s64 	%rd14, %rd12, %rd13;
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f1;
	mov.b16 	%rs1, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f4;
	mov.b16 	%rs2, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f3;
	mov.b16 	%rs3, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f2;
	mov.b16 	%rs4, %temp;
}
	st.global.v4.u16 	[%rd14], {%rs4, %rs3, %rs2, %rs1};

BB1_4:
	ret;
}

	// .globl	Mask_Blend_Normal_AInverted
.visible .entry Mask_Blend_Normal_AInverted(
	.param .u64 Mask_Blend_Normal_AInverted_param_0,
	.param .u64 Mask_Blend_Normal_AInverted_param_1,
	.param .u64 Mask_Blend_Normal_AInverted_param_2,
	.param .u64 Mask_Blend_Normal_AInverted_param_3,
	.param .u32 Mask_Blend_Normal_AInverted_param_4,
	.param .u32 Mask_Blend_Normal_AInverted_param_5,
	.param .u32 Mask_Blend_Normal_AInverted_param_6,
	.param .u32 Mask_Blend_Normal_AInverted_param_7,
	.param .f32 Mask_Blend_Normal_AInverted_param_8
)
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<5>;
	.reg .f32 	%f<26>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd2, [Mask_Blend_Normal_AInverted_param_0];
	ld.param.u64 	%rd3, [Mask_Blend_Normal_AInverted_param_1];
	ld.param.u32 	%r3, [Mask_Blend_Normal_AInverted_param_4];
	ld.param.u32 	%r4, [Mask_Blend_Normal_AInverted_param_5];
	ld.param.u32 	%r5, [Mask_Blend_Normal_AInverted_param_6];
	ld.param.u32 	%r6, [Mask_Blend_Normal_AInverted_param_7];
	ld.param.f32 	%f5, [Mask_Blend_Normal_AInverted_param_8];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	setp.lt.s32	%p1, %r1, %r5;
	setp.lt.s32	%p2, %r2, %r6;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB2_4;
	bra.uni 	BB2_1;

BB2_1:
	cvt.rn.f32.s32	%f6, %r1;
	add.ftz.f32 	%f7, %f6, 0f3F000000;
	cvt.rn.f32.s32	%f8, %r2;
	add.ftz.f32 	%f9, %f8, 0f3F000000;
	tex.2d.v4.f32.f32	{%f10, %f11, %f12, %f13}, [texture0_RECT, {%f7, %f9}];
	tex.2d.v4.f32.f32	{%f14, %f15, %f16, %f1}, [texture1_RECT, {%f7, %f9}];
	mad.lo.s32 	%r13, %r2, %r5, %r1;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd6, %rd7;
	mov.f32 	%f17, 0f3F800000;
	sub.ftz.f32 	%f18, %f17, %f1;
	ld.global.f32 	%f19, [%rd8];
	mul.ftz.f32 	%f20, %f19, %f18;
	mul.ftz.f32 	%f21, %f20, %f5;
	sub.ftz.f32 	%f22, %f17, %f21;
	mul.ftz.f32 	%f23, %f10, %f22;
	fma.rn.ftz.f32 	%f2, %f14, %f21, %f23;
	mul.ftz.f32 	%f24, %f11, %f22;
	fma.rn.ftz.f32 	%f3, %f15, %f21, %f24;
	mul.ftz.f32 	%f25, %f12, %f22;
	fma.rn.ftz.f32 	%f4, %f16, %f21, %f25;
	mad.lo.s32 	%r14, %r2, %r3, %r1;
	cvt.s64.s32	%rd1, %r14;
	setp.eq.s32	%p4, %r4, 0;
	@%p4 bra 	BB2_3;

	cvta.to.global.u64 	%rd9, %rd3;
	shl.b64 	%rd10, %rd1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.v4.f32 	[%rd11], {%f2, %f3, %f4, %f1};
	bra.uni 	BB2_4;

BB2_3:
	cvta.to.global.u64 	%rd12, %rd3;
	shl.b64 	%rd13, %rd1, 3;
	add.s64 	%rd14, %rd12, %rd13;
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f1;
	mov.b16 	%rs1, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f4;
	mov.b16 	%rs2, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f3;
	mov.b16 	%rs3, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f2;
	mov.b16 	%rs4, %temp;
}
	st.global.v4.u16 	[%rd14], {%rs4, %rs3, %rs2, %rs1};

BB2_4:
	ret;
}

	// .globl	Mask_Blend_Normal
.visible .entry Mask_Blend_Normal(
	.param .u64 Mask_Blend_Normal_param_0,
	.param .u64 Mask_Blend_Normal_param_1,
	.param .u64 Mask_Blend_Normal_param_2,
	.param .u64 Mask_Blend_Normal_param_3,
	.param .u32 Mask_Blend_Normal_param_4,
	.param .u32 Mask_Blend_Normal_param_5,
	.param .u32 Mask_Blend_Normal_param_6,
	.param .u32 Mask_Blend_Normal_param_7,
	.param .f32 Mask_Blend_Normal_param_8
)
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<5>;
	.reg .f32 	%f<24>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd2, [Mask_Blend_Normal_param_0];
	ld.param.u64 	%rd3, [Mask_Blend_Normal_param_1];
	ld.param.u32 	%r3, [Mask_Blend_Normal_param_4];
	ld.param.u32 	%r4, [Mask_Blend_Normal_param_5];
	ld.param.u32 	%r5, [Mask_Blend_Normal_param_6];
	ld.param.u32 	%r6, [Mask_Blend_Normal_param_7];
	ld.param.f32 	%f5, [Mask_Blend_Normal_param_8];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	setp.lt.s32	%p1, %r1, %r5;
	setp.lt.s32	%p2, %r2, %r6;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB3_4;
	bra.uni 	BB3_1;

BB3_1:
	cvt.rn.f32.s32	%f6, %r1;
	add.ftz.f32 	%f7, %f6, 0f3F000000;
	cvt.rn.f32.s32	%f8, %r2;
	add.ftz.f32 	%f9, %f8, 0f3F000000;
	tex.2d.v4.f32.f32	{%f10, %f11, %f12, %f13}, [texture0_RECT, {%f7, %f9}];
	tex.2d.v4.f32.f32	{%f14, %f15, %f16, %f1}, [texture1_RECT, {%f7, %f9}];
	mad.lo.s32 	%r13, %r2, %r5, %r1;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f17, [%rd8];
	mul.ftz.f32 	%f18, %f17, %f5;
	mov.f32 	%f19, 0f3F800000;
	sub.ftz.f32 	%f20, %f19, %f18;
	mul.ftz.f32 	%f21, %f10, %f20;
	fma.rn.ftz.f32 	%f2, %f14, %f18, %f21;
	mul.ftz.f32 	%f22, %f11, %f20;
	fma.rn.ftz.f32 	%f3, %f15, %f18, %f22;
	mul.ftz.f32 	%f23, %f12, %f20;
	fma.rn.ftz.f32 	%f4, %f16, %f18, %f23;
	mad.lo.s32 	%r14, %r2, %r3, %r1;
	cvt.s64.s32	%rd1, %r14;
	setp.eq.s32	%p4, %r4, 0;
	@%p4 bra 	BB3_3;

	cvta.to.global.u64 	%rd9, %rd3;
	shl.b64 	%rd10, %rd1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.v4.f32 	[%rd11], {%f2, %f3, %f4, %f1};
	bra.uni 	BB3_4;

BB3_3:
	cvta.to.global.u64 	%rd12, %rd3;
	shl.b64 	%rd13, %rd1, 3;
	add.s64 	%rd14, %rd12, %rd13;
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f1;
	mov.b16 	%rs1, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f4;
	mov.b16 	%rs2, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f3;
	mov.b16 	%rs3, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f2;
	mov.b16 	%rs4, %temp;
}
	st.global.v4.u16 	[%rd14], {%rs4, %rs3, %rs2, %rs1};

BB3_4:
	ret;
}

	// .globl	Mask_Blend_Inverted_ANormal
.visible .entry Mask_Blend_Inverted_ANormal(
	.param .u64 Mask_Blend_Inverted_ANormal_param_0,
	.param .u64 Mask_Blend_Inverted_ANormal_param_1,
	.param .u64 Mask_Blend_Inverted_ANormal_param_2,
	.param .u64 Mask_Blend_Inverted_ANormal_param_3,
	.param .u32 Mask_Blend_Inverted_ANormal_param_4,
	.param .u32 Mask_Blend_Inverted_ANormal_param_5,
	.param .u32 Mask_Blend_Inverted_ANormal_param_6,
	.param .u32 Mask_Blend_Inverted_ANormal_param_7,
	.param .f32 Mask_Blend_Inverted_ANormal_param_8
)
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<5>;
	.reg .f32 	%f<26>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd2, [Mask_Blend_Inverted_ANormal_param_0];
	ld.param.u64 	%rd3, [Mask_Blend_Inverted_ANormal_param_1];
	ld.param.u32 	%r3, [Mask_Blend_Inverted_ANormal_param_4];
	ld.param.u32 	%r4, [Mask_Blend_Inverted_ANormal_param_5];
	ld.param.u32 	%r5, [Mask_Blend_Inverted_ANormal_param_6];
	ld.param.u32 	%r6, [Mask_Blend_Inverted_ANormal_param_7];
	ld.param.f32 	%f5, [Mask_Blend_Inverted_ANormal_param_8];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	setp.lt.s32	%p1, %r1, %r5;
	setp.lt.s32	%p2, %r2, %r6;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB4_4;
	bra.uni 	BB4_1;

BB4_1:
	cvt.rn.f32.s32	%f6, %r1;
	add.ftz.f32 	%f7, %f6, 0f3F000000;
	cvt.rn.f32.s32	%f8, %r2;
	add.ftz.f32 	%f9, %f8, 0f3F000000;
	tex.2d.v4.f32.f32	{%f10, %f11, %f12, %f13}, [texture0_RECT, {%f7, %f9}];
	tex.2d.v4.f32.f32	{%f14, %f15, %f16, %f1}, [texture1_RECT, {%f7, %f9}];
	mad.lo.s32 	%r13, %r2, %r5, %r1;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f17, [%rd8];
	mov.f32 	%f18, 0f3F800000;
	sub.ftz.f32 	%f19, %f18, %f17;
	mul.ftz.f32 	%f20, %f1, %f19;
	mul.ftz.f32 	%f21, %f20, %f5;
	sub.ftz.f32 	%f22, %f18, %f21;
	mul.ftz.f32 	%f23, %f10, %f22;
	fma.rn.ftz.f32 	%f2, %f14, %f21, %f23;
	mul.ftz.f32 	%f24, %f11, %f22;
	fma.rn.ftz.f32 	%f3, %f15, %f21, %f24;
	mul.ftz.f32 	%f25, %f12, %f22;
	fma.rn.ftz.f32 	%f4, %f16, %f21, %f25;
	mad.lo.s32 	%r14, %r2, %r3, %r1;
	cvt.s64.s32	%rd1, %r14;
	setp.eq.s32	%p4, %r4, 0;
	@%p4 bra 	BB4_3;

	cvta.to.global.u64 	%rd9, %rd3;
	shl.b64 	%rd10, %rd1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.v4.f32 	[%rd11], {%f2, %f3, %f4, %f1};
	bra.uni 	BB4_4;

BB4_3:
	cvta.to.global.u64 	%rd12, %rd3;
	shl.b64 	%rd13, %rd1, 3;
	add.s64 	%rd14, %rd12, %rd13;
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f1;
	mov.b16 	%rs1, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f4;
	mov.b16 	%rs2, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f3;
	mov.b16 	%rs3, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f2;
	mov.b16 	%rs4, %temp;
}
	st.global.v4.u16 	[%rd14], {%rs4, %rs3, %rs2, %rs1};

BB4_4:
	ret;
}

	// .globl	Mask_Blend_Inverted_AInverted
.visible .entry Mask_Blend_Inverted_AInverted(
	.param .u64 Mask_Blend_Inverted_AInverted_param_0,
	.param .u64 Mask_Blend_Inverted_AInverted_param_1,
	.param .u64 Mask_Blend_Inverted_AInverted_param_2,
	.param .u64 Mask_Blend_Inverted_AInverted_param_3,
	.param .u32 Mask_Blend_Inverted_AInverted_param_4,
	.param .u32 Mask_Blend_Inverted_AInverted_param_5,
	.param .u32 Mask_Blend_Inverted_AInverted_param_6,
	.param .u32 Mask_Blend_Inverted_AInverted_param_7,
	.param .f32 Mask_Blend_Inverted_AInverted_param_8
)
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<5>;
	.reg .f32 	%f<27>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd2, [Mask_Blend_Inverted_AInverted_param_0];
	ld.param.u64 	%rd3, [Mask_Blend_Inverted_AInverted_param_1];
	ld.param.u32 	%r3, [Mask_Blend_Inverted_AInverted_param_4];
	ld.param.u32 	%r4, [Mask_Blend_Inverted_AInverted_param_5];
	ld.param.u32 	%r5, [Mask_Blend_Inverted_AInverted_param_6];
	ld.param.u32 	%r6, [Mask_Blend_Inverted_AInverted_param_7];
	ld.param.f32 	%f5, [Mask_Blend_Inverted_AInverted_param_8];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	setp.lt.s32	%p1, %r1, %r5;
	setp.lt.s32	%p2, %r2, %r6;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB5_4;
	bra.uni 	BB5_1;

BB5_1:
	cvt.rn.f32.s32	%f6, %r1;
	add.ftz.f32 	%f7, %f6, 0f3F000000;
	cvt.rn.f32.s32	%f8, %r2;
	add.ftz.f32 	%f9, %f8, 0f3F000000;
	tex.2d.v4.f32.f32	{%f10, %f11, %f12, %f13}, [texture0_RECT, {%f7, %f9}];
	tex.2d.v4.f32.f32	{%f14, %f15, %f16, %f1}, [texture1_RECT, {%f7, %f9}];
	mad.lo.s32 	%r13, %r2, %r5, %r1;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f17, [%rd8];
	mov.f32 	%f18, 0f3F800000;
	sub.ftz.f32 	%f19, %f18, %f17;
	sub.ftz.f32 	%f20, %f18, %f1;
	mul.ftz.f32 	%f21, %f19, %f20;
	mul.ftz.f32 	%f22, %f21, %f5;
	sub.ftz.f32 	%f23, %f18, %f22;
	mul.ftz.f32 	%f24, %f10, %f23;
	fma.rn.ftz.f32 	%f2, %f14, %f22, %f24;
	mul.ftz.f32 	%f25, %f11, %f23;
	fma.rn.ftz.f32 	%f3, %f15, %f22, %f25;
	mul.ftz.f32 	%f26, %f12, %f23;
	fma.rn.ftz.f32 	%f4, %f16, %f22, %f26;
	mad.lo.s32 	%r14, %r2, %r3, %r1;
	cvt.s64.s32	%rd1, %r14;
	setp.eq.s32	%p4, %r4, 0;
	@%p4 bra 	BB5_3;

	cvta.to.global.u64 	%rd9, %rd3;
	shl.b64 	%rd10, %rd1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.v4.f32 	[%rd11], {%f2, %f3, %f4, %f1};
	bra.uni 	BB5_4;

BB5_3:
	cvta.to.global.u64 	%rd12, %rd3;
	shl.b64 	%rd13, %rd1, 3;
	add.s64 	%rd14, %rd12, %rd13;
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f1;
	mov.b16 	%rs1, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f4;
	mov.b16 	%rs2, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f3;
	mov.b16 	%rs3, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f2;
	mov.b16 	%rs4, %temp;
}
	st.global.v4.u16 	[%rd14], {%rs4, %rs3, %rs2, %rs1};

BB5_4:
	ret;
}

	// .globl	Mask_Blend_Inverted
.visible .entry Mask_Blend_Inverted(
	.param .u64 Mask_Blend_Inverted_param_0,
	.param .u64 Mask_Blend_Inverted_param_1,
	.param .u64 Mask_Blend_Inverted_param_2,
	.param .u64 Mask_Blend_Inverted_param_3,
	.param .u32 Mask_Blend_Inverted_param_4,
	.param .u32 Mask_Blend_Inverted_param_5,
	.param .u32 Mask_Blend_Inverted_param_6,
	.param .u32 Mask_Blend_Inverted_param_7,
	.param .f32 Mask_Blend_Inverted_param_8
)
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<5>;
	.reg .f32 	%f<25>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd2, [Mask_Blend_Inverted_param_0];
	ld.param.u64 	%rd3, [Mask_Blend_Inverted_param_1];
	ld.param.u32 	%r3, [Mask_Blend_Inverted_param_4];
	ld.param.u32 	%r4, [Mask_Blend_Inverted_param_5];
	ld.param.u32 	%r5, [Mask_Blend_Inverted_param_6];
	ld.param.u32 	%r6, [Mask_Blend_Inverted_param_7];
	ld.param.f32 	%f5, [Mask_Blend_Inverted_param_8];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	setp.lt.s32	%p1, %r1, %r5;
	setp.lt.s32	%p2, %r2, %r6;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB6_4;
	bra.uni 	BB6_1;

BB6_1:
	cvt.rn.f32.s32	%f6, %r1;
	add.ftz.f32 	%f7, %f6, 0f3F000000;
	cvt.rn.f32.s32	%f8, %r2;
	add.ftz.f32 	%f9, %f8, 0f3F000000;
	tex.2d.v4.f32.f32	{%f10, %f11, %f12, %f13}, [texture0_RECT, {%f7, %f9}];
	tex.2d.v4.f32.f32	{%f14, %f15, %f16, %f1}, [texture1_RECT, {%f7, %f9}];
	mad.lo.s32 	%r13, %r2, %r5, %r1;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r13, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f17, [%rd8];
	mov.f32 	%f18, 0f3F800000;
	sub.ftz.f32 	%f19, %f18, %f17;
	mul.ftz.f32 	%f20, %f19, %f5;
	sub.ftz.f32 	%f21, %f18, %f20;
	mul.ftz.f32 	%f22, %f10, %f21;
	fma.rn.ftz.f32 	%f2, %f14, %f20, %f22;
	mul.ftz.f32 	%f23, %f11, %f21;
	fma.rn.ftz.f32 	%f3, %f15, %f20, %f23;
	mul.ftz.f32 	%f24, %f12, %f21;
	fma.rn.ftz.f32 	%f4, %f16, %f20, %f24;
	mad.lo.s32 	%r14, %r2, %r3, %r1;
	cvt.s64.s32	%rd1, %r14;
	setp.eq.s32	%p4, %r4, 0;
	@%p4 bra 	BB6_3;

	cvta.to.global.u64 	%rd9, %rd3;
	shl.b64 	%rd10, %rd1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.v4.f32 	[%rd11], {%f2, %f3, %f4, %f1};
	bra.uni 	BB6_4;

BB6_3:
	cvta.to.global.u64 	%rd12, %rd3;
	shl.b64 	%rd13, %rd1, 3;
	add.s64 	%rd14, %rd12, %rd13;
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f1;
	mov.b16 	%rs1, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f4;
	mov.b16 	%rs2, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f3;
	mov.b16 	%rs3, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f2;
	mov.b16 	%rs4, %temp;
}
	st.global.v4.u16 	[%rd14], {%rs4, %rs3, %rs2, %rs1};

BB6_4:
	ret;
}

	// .globl	Blend_Normal
.visible .entry Blend_Normal(
	.param .u64 Blend_Normal_param_0,
	.param .u64 Blend_Normal_param_1,
	.param .u64 Blend_Normal_param_2,
	.param .u32 Blend_Normal_param_3,
	.param .u32 Blend_Normal_param_4,
	.param .u32 Blend_Normal_param_5,
	.param .u32 Blend_Normal_param_6,
	.param .f32 Blend_Normal_param_7
)
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<5>;
	.reg .f32 	%f<23>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd2, [Blend_Normal_param_0];
	ld.param.u32 	%r3, [Blend_Normal_param_3];
	ld.param.u32 	%r4, [Blend_Normal_param_4];
	ld.param.u32 	%r5, [Blend_Normal_param_5];
	ld.param.u32 	%r6, [Blend_Normal_param_6];
	ld.param.f32 	%f5, [Blend_Normal_param_7];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	setp.lt.s32	%p1, %r1, %r5;
	setp.lt.s32	%p2, %r2, %r6;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB7_4;
	bra.uni 	BB7_1;

BB7_1:
	cvt.rn.f32.s32	%f6, %r1;
	add.ftz.f32 	%f7, %f6, 0f3F000000;
	cvt.rn.f32.s32	%f8, %r2;
	add.ftz.f32 	%f9, %f8, 0f3F000000;
	tex.2d.v4.f32.f32	{%f10, %f11, %f12, %f13}, [texture0_RECT, {%f7, %f9}];
	tex.2d.v4.f32.f32	{%f14, %f15, %f16, %f1}, [texture1_RECT, {%f7, %f9}];
	mul.ftz.f32 	%f17, %f1, %f5;
	mov.f32 	%f18, 0f3F800000;
	sub.ftz.f32 	%f19, %f18, %f17;
	mul.ftz.f32 	%f20, %f10, %f19;
	fma.rn.ftz.f32 	%f2, %f14, %f17, %f20;
	mul.ftz.f32 	%f21, %f11, %f19;
	fma.rn.ftz.f32 	%f3, %f15, %f17, %f21;
	mul.ftz.f32 	%f22, %f12, %f19;
	fma.rn.ftz.f32 	%f4, %f16, %f17, %f22;
	mad.lo.s32 	%r13, %r2, %r3, %r1;
	cvt.s64.s32	%rd1, %r13;
	setp.eq.s32	%p4, %r4, 0;
	@%p4 bra 	BB7_3;

	cvta.to.global.u64 	%rd5, %rd2;
	shl.b64 	%rd6, %rd1, 4;
	add.s64 	%rd7, %rd5, %rd6;
	st.global.v4.f32 	[%rd7], {%f2, %f3, %f4, %f1};
	bra.uni 	BB7_4;

BB7_3:
	cvta.to.global.u64 	%rd8, %rd2;
	shl.b64 	%rd9, %rd1, 3;
	add.s64 	%rd10, %rd8, %rd9;
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f1;
	mov.b16 	%rs1, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f4;
	mov.b16 	%rs2, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f3;
	mov.b16 	%rs3, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f2;
	mov.b16 	%rs4, %temp;
}
	st.global.v4.u16 	[%rd10], {%rs4, %rs3, %rs2, %rs1};

BB7_4:
	ret;
}

	// .globl	Blend_Inverted
.visible .entry Blend_Inverted(
	.param .u64 Blend_Inverted_param_0,
	.param .u64 Blend_Inverted_param_1,
	.param .u64 Blend_Inverted_param_2,
	.param .u32 Blend_Inverted_param_3,
	.param .u32 Blend_Inverted_param_4,
	.param .u32 Blend_Inverted_param_5,
	.param .u32 Blend_Inverted_param_6,
	.param .f32 Blend_Inverted_param_7
)
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<5>;
	.reg .f32 	%f<24>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd2, [Blend_Inverted_param_0];
	ld.param.u32 	%r3, [Blend_Inverted_param_3];
	ld.param.u32 	%r4, [Blend_Inverted_param_4];
	ld.param.u32 	%r5, [Blend_Inverted_param_5];
	ld.param.u32 	%r6, [Blend_Inverted_param_6];
	ld.param.f32 	%f5, [Blend_Inverted_param_7];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	setp.lt.s32	%p1, %r1, %r5;
	setp.lt.s32	%p2, %r2, %r6;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB8_4;
	bra.uni 	BB8_1;

BB8_1:
	cvt.rn.f32.s32	%f6, %r1;
	add.ftz.f32 	%f7, %f6, 0f3F000000;
	cvt.rn.f32.s32	%f8, %r2;
	add.ftz.f32 	%f9, %f8, 0f3F000000;
	tex.2d.v4.f32.f32	{%f10, %f11, %f12, %f13}, [texture0_RECT, {%f7, %f9}];
	tex.2d.v4.f32.f32	{%f14, %f15, %f16, %f1}, [texture1_RECT, {%f7, %f9}];
	mov.f32 	%f17, 0f3F800000;
	sub.ftz.f32 	%f18, %f17, %f1;
	mul.ftz.f32 	%f19, %f18, %f5;
	sub.ftz.f32 	%f20, %f17, %f19;
	mul.ftz.f32 	%f21, %f10, %f20;
	fma.rn.ftz.f32 	%f2, %f14, %f19, %f21;
	mul.ftz.f32 	%f22, %f11, %f20;
	fma.rn.ftz.f32 	%f3, %f15, %f19, %f22;
	mul.ftz.f32 	%f23, %f12, %f20;
	fma.rn.ftz.f32 	%f4, %f16, %f19, %f23;
	mad.lo.s32 	%r13, %r2, %r3, %r1;
	cvt.s64.s32	%rd1, %r13;
	setp.eq.s32	%p4, %r4, 0;
	@%p4 bra 	BB8_3;

	cvta.to.global.u64 	%rd5, %rd2;
	shl.b64 	%rd6, %rd1, 4;
	add.s64 	%rd7, %rd5, %rd6;
	st.global.v4.f32 	[%rd7], {%f2, %f3, %f4, %f1};
	bra.uni 	BB8_4;

BB8_3:
	cvta.to.global.u64 	%rd8, %rd2;
	shl.b64 	%rd9, %rd1, 3;
	add.s64 	%rd10, %rd8, %rd9;
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f1;
	mov.b16 	%rs1, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f4;
	mov.b16 	%rs2, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f3;
	mov.b16 	%rs3, %temp;
}
	{
	.reg .b16 %temp;
	cvt.rn.ftz.f16.f32 	%temp, %f2;
	mov.b16 	%rs4, %temp;
}
	st.global.v4.u16 	[%rd10], {%rs4, %rs3, %rs2, %rs1};

BB8_4:
	ret;
}

	// .globl	CopyMaskToBufferKernel
.visible .entry CopyMaskToBufferKernel(
	.param .u64 CopyMaskToBufferKernel_param_0,
	.param .u64 CopyMaskToBufferKernel_param_1,
	.param .u32 CopyMaskToBufferKernel_param_2,
	.param .u32 CopyMaskToBufferKernel_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<6>;


	ld.param.u64 	%rd1, [CopyMaskToBufferKernel_param_1];
	ld.param.u32 	%r3, [CopyMaskToBufferKernel_param_2];
	ld.param.u32 	%r4, [CopyMaskToBufferKernel_param_3];
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ntid.y;
	mov.u32 	%r9, %ctaid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB9_2;
	bra.uni 	BB9_1;

BB9_1:
	cvt.rn.f32.s32	%f1, %r1;
	add.ftz.f32 	%f2, %f1, 0f3F000000;
	cvt.rn.f32.s32	%f3, %r2;
	add.ftz.f32 	%f4, %f3, 0f3F000000;
	tex.2d.v4.f32.f32	{%f5, %f6, %f7, %f8}, [inMaskImage, {%f2, %f4}];
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	st.global.f32 	[%rd5], %f5;

BB9_2:
	ret;
}

	// .globl	RasterizationKernel
.visible .entry RasterizationKernel(
	.param .u64 RasterizationKernel_param_0,
	.param .u64 RasterizationKernel_param_1,
	.param .u64 RasterizationKernel_param_2,
	.param .u32 RasterizationKernel_param_3,
	.param .align 16 .b8 RasterizationKernel_param_4[16],
	.param .align 16 .b8 RasterizationKernel_param_5[16],
	.param .align 8 .b8 RasterizationKernel_param_6[8],
	.param .u32 RasterizationKernel_param_7,
	.param .u32 RasterizationKernel_param_8,
	.param .u32 RasterizationKernel_param_9
)
{
	.reg .pred 	%p<48>;
	.reg .f32 	%f<133>;
	.reg .b32 	%r<79>;
	.reg .b64 	%rd<25>;


	ld.param.u64 	%rd3, [RasterizationKernel_param_0];
	ld.param.u64 	%rd4, [RasterizationKernel_param_1];
	ld.param.u64 	%rd5, [RasterizationKernel_param_2];
	ld.param.u32 	%r15, [RasterizationKernel_param_3];
	ld.param.v4.u32 	{%r25, %r26, %r27, %r28}, [RasterizationKernel_param_4];
	ld.param.v4.u32 	{%r33, %r34, %r35, %r36}, [RasterizationKernel_param_5];
	ld.param.v2.u32 	{%r37, %r38}, [RasterizationKernel_param_6];
	ld.param.u32 	%r22, [RasterizationKernel_param_7];
	ld.param.u32 	%r23, [RasterizationKernel_param_8];
	ld.param.u32 	%r24, [RasterizationKernel_param_9];
	mov.u32 	%r39, %ctaid.x;
	mov.u32 	%r40, %ntid.x;
	mov.u32 	%r41, %tid.x;
	mad.lo.s32 	%r1, %r40, %r39, %r41;
	mov.u32 	%r42, %ntid.y;
	mov.u32 	%r43, %ctaid.y;
	mov.u32 	%r44, %tid.y;
	mad.lo.s32 	%r2, %r42, %r43, %r44;
	setp.lt.u32	%p2, %r1, %r25;
	setp.ge.u32	%p3, %r1, %r27;
	or.pred  	%p4, %p2, %p3;
	setp.lt.u32	%p5, %r2, %r26;
	or.pred  	%p6, %p4, %p5;
	setp.ge.u32	%p7, %r2, %r28;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	BB10_31;

	cvt.rn.f32.u32	%f38, %r1;
	add.ftz.f32 	%f1, %f38, 0f3F000000;
	cvt.rn.f32.u32	%f39, %r2;
	add.ftz.f32 	%f2, %f39, 0f3F000000;
	shr.s32 	%r46, %r2, 31;
	shr.u32 	%r47, %r46, 27;
	add.s32 	%r48, %r2, %r47;
	shr.s32 	%r49, %r48, 5;
	shr.s32 	%r50, %r1, 31;
	shr.u32 	%r51, %r50, 27;
	add.s32 	%r52, %r1, %r51;
	shr.s32 	%r53, %r52, 5;
	mad.lo.s32 	%r3, %r49, %r22, %r53;
	setp.eq.s32	%p9, %r24, 0;
	mov.f32 	%f132, 0f00000000;
	mov.f32 	%f111, %f132;
	mov.u32 	%r45, 0;
	mov.f32 	%f128, %f132;
	@%p9 bra 	BB10_25;

	cvta.to.global.u64 	%rd8, %rd4;
	cvta.to.global.u64 	%rd11, %rd5;
	mov.u32 	%r78, %r45;

BB10_3:
	mov.f32 	%f125, %f132;
	mov.f32 	%f129, %f125;
	mov.f32 	%f106, %f111;
	mov.f32 	%f108, %f106;
	mad.lo.s32 	%r55, %r78, %r23, %r3;
	shl.b32 	%r56, %r55, 8;
	cvt.u64.u32	%rd1, %r56;
	mov.u32 	%r77, %r45;

BB10_4:
	mov.f32 	%f114, %f129;
	mov.f32 	%f6, %f114;
	mov.f32 	%f95, %f108;
	mov.f32 	%f5, %f95;
	mov.u32 	%r5, %r77;
	cvt.u64.u32	%rd6, %r5;
	add.s64 	%rd7, %rd6, %rd1;
	shl.b64 	%rd9, %rd7, 2;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.u32 	%r6, [%rd10];
	setp.eq.s32	%p10, %r6, -1;
	mov.f32 	%f109, %f5;
	mov.f32 	%f130, %f6;
	@%p10 bra 	BB10_24;

	mul.wide.u32 	%rd12, %r6, 72;
	add.s64 	%rd2, %rd11, %rd12;
	ld.global.f32 	%f7, [%rd2];
	ld.global.f32 	%f8, [%rd2+4];
	mul.ftz.f32 	%f40, %f2, %f8;
	fma.rn.ftz.f32 	%f41, %f1, %f7, %f40;
	ld.global.f32 	%f42, [%rd2+8];
	add.ftz.f32 	%f43, %f42, %f41;
	ld.global.f32 	%f9, [%rd2+12];
	ld.global.f32 	%f10, [%rd2+16];
	mul.ftz.f32 	%f44, %f2, %f10;
	fma.rn.ftz.f32 	%f45, %f1, %f9, %f44;
	ld.global.f32 	%f46, [%rd2+20];
	add.ftz.f32 	%f47, %f46, %f45;
	ld.global.f32 	%f11, [%rd2+24];
	ld.global.f32 	%f12, [%rd2+28];
	mul.ftz.f32 	%f48, %f2, %f12;
	fma.rn.ftz.f32 	%f49, %f1, %f11, %f48;
	ld.global.f32 	%f50, [%rd2+32];
	add.ftz.f32 	%f51, %f50, %f49;
	abs.ftz.f32 	%f52, %f43;
	setp.lt.ftz.f32	%p11, %f52, 0f3727C5AC;
	selp.f32	%f13, 0f00000000, %f43, %p11;
	abs.ftz.f32 	%f53, %f47;
	setp.lt.ftz.f32	%p12, %f53, 0f3727C5AC;
	selp.f32	%f14, 0f00000000, %f47, %p12;
	abs.ftz.f32 	%f54, %f51;
	setp.lt.ftz.f32	%p13, %f54, 0f3727C5AC;
	selp.f32	%f15, 0f00000000, %f51, %p13;
	setp.lt.ftz.f32	%p14, %f13, 0f00000000;
	setp.lt.ftz.f32	%p15, %f14, 0f00000000;
	or.pred  	%p16, %p14, %p15;
	setp.lt.ftz.f32	%p17, %f15, 0f00000000;
	or.pred  	%p18, %p16, %p17;
	mov.f32 	%f110, %f5;
	mov.f32 	%f131, %f6;
	@%p18 bra 	BB10_23;

	setp.neu.ftz.f32	%p19, %f13, 0f00000000;
	@%p19 bra 	BB10_9;

	setp.lt.ftz.f32	%p20, %f7, 0f00000000;
	mov.f32 	%f97, %f5;
	mov.f32 	%f110, %f97;
	mov.f32 	%f116, %f6;
	mov.f32 	%f131, %f116;
	@%p20 bra 	BB10_23;

	setp.neu.ftz.f32	%p21, %f7, 0f00000000;
	setp.ltu.ftz.f32	%p22, %f8, 0f00000000;
	or.pred  	%p23, %p21, %p22;
	mov.f32 	%f98, %f5;
	mov.f32 	%f110, %f98;
	mov.f32 	%f117, %f6;
	mov.f32 	%f131, %f117;
	@!%p23 bra 	BB10_23;
	bra.uni 	BB10_9;

BB10_9:
	setp.neu.ftz.f32	%p24, %f14, 0f00000000;
	@%p24 bra 	BB10_12;

	setp.lt.ftz.f32	%p25, %f9, 0f00000000;
	mov.f32 	%f99, %f5;
	mov.f32 	%f110, %f99;
	mov.f32 	%f118, %f6;
	mov.f32 	%f131, %f118;
	@%p25 bra 	BB10_23;

	setp.neu.ftz.f32	%p26, %f9, 0f00000000;
	setp.ltu.ftz.f32	%p27, %f10, 0f00000000;
	or.pred  	%p28, %p26, %p27;
	mov.f32 	%f100, %f5;
	mov.f32 	%f110, %f100;
	mov.f32 	%f119, %f6;
	mov.f32 	%f131, %f119;
	@!%p28 bra 	BB10_23;
	bra.uni 	BB10_12;

BB10_12:
	setp.neu.ftz.f32	%p29, %f15, 0f00000000;
	@%p29 bra 	BB10_15;

	setp.lt.ftz.f32	%p30, %f11, 0f00000000;
	mov.f32 	%f101, %f5;
	mov.f32 	%f110, %f101;
	mov.f32 	%f120, %f6;
	mov.f32 	%f131, %f120;
	@%p30 bra 	BB10_23;

	setp.neu.ftz.f32	%p31, %f11, 0f00000000;
	setp.ltu.ftz.f32	%p32, %f12, 0f00000000;
	or.pred  	%p33, %p31, %p32;
	mov.f32 	%f102, %f5;
	mov.f32 	%f110, %f102;
	mov.f32 	%f121, %f6;
	mov.f32 	%f131, %f121;
	@!%p33 bra 	BB10_23;
	bra.uni 	BB10_15;

BB10_15:
	add.ftz.f32 	%f55, %f13, %f14;
	add.ftz.f32 	%f56, %f55, %f15;
	div.approx.ftz.f32 	%f16, %f13, %f56;
	div.approx.ftz.f32 	%f17, %f14, %f56;
	div.approx.ftz.f32 	%f18, %f15, %f56;
	ld.global.f32 	%f57, [%rd2+36];
	ld.global.f32 	%f58, [%rd2+40];
	mul.ftz.f32 	%f59, %f17, %f58;
	fma.rn.ftz.f32 	%f60, %f16, %f57, %f59;
	ld.global.f32 	%f61, [%rd2+44];
	fma.rn.ftz.f32 	%f19, %f18, %f61, %f60;
	setp.leu.ftz.f32	%p34, %f19, %f5;
	mov.f32 	%f103, %f5;
	mov.f32 	%f110, %f103;
	mov.f32 	%f131, %f6;
	@%p34 bra 	BB10_23;

	ld.global.f32 	%f62, [%rd2+48];
	ld.global.f32 	%f63, [%rd2+52];
	mul.ftz.f32 	%f64, %f17, %f63;
	fma.rn.ftz.f32 	%f65, %f16, %f62, %f64;
	ld.global.f32 	%f66, [%rd2+56];
	fma.rn.ftz.f32 	%f67, %f18, %f66, %f65;
	fma.rn.ftz.f32 	%f20, %f67, 0f40000000, 0f3F800000;
	ld.global.f32 	%f68, [%rd2+60];
	ld.global.f32 	%f69, [%rd2+64];
	mul.ftz.f32 	%f70, %f17, %f69;
	fma.rn.ftz.f32 	%f71, %f16, %f68, %f70;
	ld.global.f32 	%f72, [%rd2+68];
	fma.rn.ftz.f32 	%f21, %f18, %f72, %f71;
	setp.ltu.ftz.f32	%p35, %f19, 0f00000000;
	@%p35 bra 	BB10_18;
	bra.uni 	BB10_17;

BB10_18:
	neg.ftz.f32 	%f75, %f19;
	lg2.approx.ftz.f32 	%f76, %f75;
	mul.ftz.f32 	%f77, %f20, %f76;
	ex2.approx.ftz.f32 	%f78, %f77;
	neg.ftz.f32 	%f112, %f78;
	bra.uni 	BB10_19;

BB10_17:
	lg2.approx.ftz.f32 	%f73, %f19;
	mul.ftz.f32 	%f74, %f20, %f73;
	ex2.approx.ftz.f32 	%f112, %f74;

BB10_19:
	mov.f32 	%f79, 0f3F800000;
	sub.ftz.f32 	%f25, %f79, %f19;
	setp.ltu.ftz.f32	%p36, %f25, 0f00000000;
	@%p36 bra 	BB10_21;
	bra.uni 	BB10_20;

BB10_21:
	neg.ftz.f32 	%f82, %f25;
	lg2.approx.ftz.f32 	%f83, %f82;
	mul.ftz.f32 	%f84, %f20, %f83;
	ex2.approx.ftz.f32 	%f85, %f84;
	neg.ftz.f32 	%f113, %f85;
	bra.uni 	BB10_22;

BB10_20:
	lg2.approx.ftz.f32 	%f80, %f25;
	mul.ftz.f32 	%f81, %f20, %f80;
	ex2.approx.ftz.f32 	%f113, %f81;

BB10_22:
	add.ftz.f32 	%f86, %f21, %f21;
	add.ftz.f32 	%f87, %f86, 0fBF800000;
	cvt.ftz.sat.f32.f32	%f88, %f87;
	cvt.ftz.sat.f32.f32	%f89, %f86;
	sub.ftz.f32 	%f90, %f89, %f88;
	fma.rn.ftz.f32 	%f91, %f19, %f90, %f88;
	sub.ftz.f32 	%f93, %f79, %f113;
	sub.ftz.f32 	%f94, %f93, %f112;
	fma.rn.ftz.f32 	%f131, %f94, %f91, %f112;
	mov.f32 	%f110, %f19;

BB10_23:
	mov.f32 	%f129, %f131;
	mov.f32 	%f108, %f110;
	add.s32 	%r7, %r5, 1;
	setp.lt.u32	%p37, %r7, 256;
	mov.u32 	%r77, %r7;
	mov.f32 	%f109, %f108;
	mov.f32 	%f130, %f129;
	@%p37 bra 	BB10_4;

BB10_24:
	mov.f32 	%f132, %f130;
	mov.f32 	%f111, %f109;
	add.s32 	%r78, %r78, 1;
	setp.lt.u32	%p38, %r78, %r24;
	mov.f32 	%f128, %f132;
	@%p38 bra 	BB10_3;

BB10_25:
	add.s32 	%r10, %r36, -1;
	sub.s32 	%r61, %r10, %r2;
	mul.lo.s32 	%r11, %r61, %r15;
	add.s32 	%r66, %r11, %r1;
	cvta.to.global.u64 	%rd13, %rd3;
	mul.wide.u32 	%rd14, %r66, 4;
	add.s64 	%rd15, %rd13, %rd14;
	st.global.f32 	[%rd15], %f128;
	sub.s32 	%r12, %r37, %r1;
	sub.s32 	%r13, %r38, %r2;
	setp.ge.u32	%p39, %r12, %r33;
	setp.lt.u32	%p40, %r12, %r35;
	and.pred  	%p1, %p39, %p40;
	@!%p1 bra 	BB10_27;
	bra.uni 	BB10_26;

BB10_26:
	add.s32 	%r67, %r11, %r12;
	mul.wide.u32 	%rd17, %r67, 4;
	add.s64 	%rd18, %rd13, %rd17;
	st.global.f32 	[%rd18], %f128;

BB10_27:
	setp.ge.u32	%p41, %r13, %r34;
	setp.lt.u32	%p42, %r13, %r36;
	and.pred  	%p43, %p41, %p42;
	@!%p43 bra 	BB10_29;
	bra.uni 	BB10_28;

BB10_28:
	sub.s32 	%r68, %r10, %r13;
	mad.lo.s32 	%r73, %r68, %r15, %r1;
	mul.wide.u32 	%rd20, %r73, 4;
	add.s64 	%rd21, %rd13, %rd20;
	st.global.f32 	[%rd21], %f128;

BB10_29:
	and.pred  	%p46, %p1, %p41;
	and.pred  	%p47, %p46, %p42;
	@!%p47 bra 	BB10_31;
	bra.uni 	BB10_30;

BB10_30:
	sub.s32 	%r74, %r10, %r13;
	mad.lo.s32 	%r75, %r74, %r15, %r12;
	mul.wide.u32 	%rd23, %r75, 4;
	add.s64 	%rd24, %rd13, %rd23;
	st.global.f32 	[%rd24], %f128;

BB10_31:
	ret;
}


